package org.example.fashion_web.frontend.controller;

import org.example.fashion_web.backend.dto.CategoryForm;
import org.example.fashion_web.backend.dto.ProductForm;
import org.example.fashion_web.backend.exceptions.ResourceNotFoundException;
import org.example.fashion_web.backend.models.Brand;
import org.example.fashion_web.backend.models.Category;
import org.example.fashion_web.backend.models.Product;
import org.example.fashion_web.backend.services.BrandService;
import org.example.fashion_web.backend.services.CategoryService;
import org.example.fashion_web.backend.services.ProductService;
import org.example.fashion_web.backend.services.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.security.Principal;
import java.util.List;
import java.util.Optional;
@Controller

public class ProductManagementController {

    @Autowired
    private final ProductService productService;
    @Autowired
    private final BrandService brandService;
    @Autowired
    private final CategoryService categoryService;
    @Autowired
    private final UserService userService; // Gi·∫£ s·ª≠ b·∫°n c√≥ UserService ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    @Autowired
    private UserDetailsService userDetailsService; // Inject UserDetailsService
    public ProductManagementController(ProductService productService, BrandService brandService, CategoryService categoryService, UserService userService) {
        this.productService = productService;
        this.brandService = brandService;
        this.categoryService = categoryService;
        this.userService = userService;
    }

//    @GetMapping("/admin/product")
//    public String listProducts(Model model, Principal principal) {
//        if (principal != null) {
//            UserDetails userDetails = userDetailsService.loadUserByUsername(principal.getName());
//            if (userDetails != null) {
//                model.addAttribute("user", userDetails);
//            }
//        }
//        List<Product> products = productService.getAllProducts();
//        model.addAttribute("products", products);
//
//        return "product/products";
//    }
    @GetMapping("/admin/product")
    public String listProducts(
            @RequestParam(defaultValue = "0") Integer page,
            @RequestParam(defaultValue = "10") Integer size,
            Model model, Principal principal) {

        // X·ª≠ l√Ω th√¥ng tin ng∆∞·ªùi d√πng n·∫øu c√≥
        if (principal != null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(principal.getName());
            if (userDetails != null) {
                model.addAttribute("user", userDetails);
            }
        }

        // L·∫•y t·ªïng s·ªë s·∫£n ph·∫©m
        int totalProducts = productService.getTotalProductsCount();

        // N·∫øu s·ªë s·∫£n ph·∫©m > 10, d√πng ph√¢n trang
        if (totalProducts > 10) {
            Pageable pageable = PageRequest.of(page, size);
            Page<Product> productPage = productService.getAllProducts(pageable);
            model.addAttribute("productPage", productPage);
            model.addAttribute("currentPage", page);
            model.addAttribute("pageSize", size);
            return "product/products-paging";
        } else {
            // N·∫øu s·ªë s·∫£n ph·∫©m <= 15, tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch
            List<Product> products = productService.getAllProducts();
            model.addAttribute("products", products);
            return "product/products";
        }
    }


    @GetMapping("/admin/products/add-category")
    public String showAddCategoryForm(Model model) {
        model.addAttribute("categoryForm", new CategoryForm());
        model.addAttribute("categories", categoryService.getAllChildrenCategories()); // L·∫•y danh m·ª•c
        model.addAttribute("categoriesParent", categoryService.getAllParentCategories()); // L·∫•y danh m·ª•c
        return "product/add-category";
    }

    @PostMapping("/admin/products/add-category")
    public String addProduct(@ModelAttribute("categoryForm") CategoryForm categoryForm, Model model, RedirectAttributes redirectAttributes) {
        try {
            // Ki·ªÉm tra v√† l∆∞u category parent
            Optional<Category> categoryOpt = categoryService.findByName(categoryForm.getParent_category_name());
            Category categoryParent = categoryOpt.orElseGet(() -> {
                Category newCategory = new Category();
                newCategory.setId(categoryForm.getParent_category_id());
                return categoryService.save(newCategory);
            });
            // T·∫°o category
            Category category = new Category();
            category.setName(categoryForm.getCategory_name());
            category.setDescription(categoryForm.getDescription());
            category.setParentCategory(categoryParent);

            categoryService.save(category);

            System.out.println("Th√¥ng tin s·∫£n ph·∫©m: " + category);
            redirectAttributes.addFlashAttribute("successMessage", "Th√™m danh m·ª•c s·∫£n ph·∫©m th√†nh c√¥ng!");
            return "redirect:/admin/product";
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "Th√™m danh m·ª•c s·∫£n ph·∫©m th·∫•t b·∫°i!");

            // üîπ Truy·ªÅn l·∫°i productForm ƒë·ªÉ gi·ªØ d·ªØ li·ªáu ƒë√£ nh·∫≠p
            model.addAttribute("categoryForm", categoryForm);
            return "product/add-category"; // Kh√¥ng redirect, m√† tr·∫£ v·ªÅ trang nh·∫≠p form
        }
    }

    @GetMapping("/admin/products/add")
    public String showAddProductForm(Model model) {
        model.addAttribute("productForm", new ProductForm());
        model.addAttribute("categories", categoryService.getAllChildrenCategories()); // L·∫•y danh m·ª•c
        return "product/add-product";
    }

    @PostMapping("/admin/products/add")
    public String addProduct(@ModelAttribute("productForm") ProductForm productForm, Model model, RedirectAttributes redirectAttributes) {
        try {
            // Ki·ªÉm tra v√† l∆∞u category
            Optional<Category> categoryOpt = categoryService.findByName(productForm.getCategory_name());
            Category category = categoryOpt.orElseGet(() -> {
                Category newCategory = new Category();
                newCategory.setId(productForm.getCategory_id());
                return categoryService.save(newCategory);
            });

            // Ki·ªÉm tra v√† l∆∞u brand
            Optional<Brand> brandOpt = brandService.findByName(productForm.getBrand_name());
            Brand brand = brandOpt.orElseGet(() -> {
                Brand newBrand = new Brand();
                newBrand.setId(productForm.getBrand_id());
                return brandService.save(newBrand);
            });

            // T·∫°o product
            Product product = new Product();
            product.setName(productForm.getName());
            product.setPrice(productForm.getPrice());
            product.setDescription(productForm.getDescription());
            product.setStockQuantity(productForm.getStock_quantity());

            // Set category & brand cho product
            product.setCategory(category);
            product.setBrand(brand);

            productService.save(product);
            System.out.println("Th√¥ng tin s·∫£n ph·∫©m: " + product);
            redirectAttributes.addFlashAttribute("successMessage", "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
            return "redirect:/admin/product";
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i!");

            // üîπ Truy·ªÅn l·∫°i productForm ƒë·ªÉ gi·ªØ d·ªØ li·ªáu ƒë√£ nh·∫≠p
            model.addAttribute("productForm", productForm);
            return "product/add-product"; // Kh√¥ng redirect, m√† tr·∫£ v·ªÅ trang nh·∫≠p form
        }
    }
    // 2Ô∏è‚É£ Xem chi ti·∫øt s·∫£n ph·∫©m theo ID
    @GetMapping("/{id}")
    public String viewProduct(@PathVariable Long id, Model model) {
        Product product = productService.getProductById(id)
                .orElse(null);

        if (product == null) {
            return "redirect:/admin/products"; // Fix ƒë∆∞·ªùng d·∫´n redirect
        }

        model.addAttribute("product", product);
        return "products/detail"; // ƒê·∫£m b·∫£o c√≥ file product/detail.html
    }

    // 5Ô∏è‚É£ Hi·ªÉn th·ªã form c·∫≠p nh·∫≠t s·∫£n ph·∫©m
    @GetMapping("/admin/products/edit/{id}")
    public String showEditProductForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
        Product product = productService.getProductById(id)
                .orElseThrow(() -> new ResourceNotFoundException("·ª®ng vi√™n kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + id));

        // Ki·ªÉm tra v√† l∆∞u category
        Optional<Category> categoryOpt = categoryService.findByName(product.getCategory().getName());
        Category category = categoryOpt.orElseGet(() -> {
            Category newCategory = new Category();
            newCategory.setId(product.getCategory().getId());
            return categoryService.save(newCategory);
        });

        // Ki·ªÉm tra v√† l∆∞u brand
        Optional<Brand> brandOpt = brandService.findByName(product.getBrand().getName());
        Brand brand = brandOpt.orElseGet(() -> {
            Brand newBrand = new Brand();
            newBrand.setId(product.getBrand().getId());
            return brandService.save(newBrand);
        });
        // Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng Candidate th√†nh CandidateForm ƒë·ªÉ d·ªÖ d√†ng x·ª≠ l√Ω trong form
        ProductForm productForm = new ProductForm();
        productForm.setProduct_id(product.getId());
        productForm.setBrand_id(product.getBrand().getId());
        productForm.setCategory_id(product.getCategory().getId());
        productForm.setName(product.getName());
        productForm.setPrice(product.getPrice());
        productForm.setDescription(product.getDescription());
        productForm.setBrand_name(product.getBrand().getName());
        productForm.setCategory_name(product.getCategory().getName());

        model.addAttribute("productForm", productForm);
        return "product/update-products";
    }
    // X·ª≠ l√Ω c·∫≠p nh·∫≠t ·ª©ng vi√™n
    @PostMapping("/admin/products/edit/{id}")
    public String updateProduct(@PathVariable("id") Long id,
                                  @ModelAttribute("productForm") ProductForm productForm,
                                  RedirectAttributes redirectAttributes) {
        try {
            Product existingProduct = productService.getProductById(id)
                    .orElseThrow(() -> new ResourceNotFoundException("·ª®ng vi√™n kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + id));

            // Ki·ªÉm tra v√† l∆∞u category
            Optional<Category> categoryOpt = categoryService.findByName(productForm.getCategory_name());
            Category category = categoryOpt.orElseGet(() -> {
                Category newCategory = new Category();
                newCategory.setId(productForm.getCategory_id());
                newCategory.setName(productForm.getCategory_name());
                return categoryService.save(newCategory);
            });

            // Ki·ªÉm tra v√† l∆∞u brand
            Optional<Brand> brandOpt = brandService.findByName(productForm.getBrand_name());
            Brand brand = brandOpt.orElseGet(() -> {
                Brand newBrand = new Brand();
                newBrand.setId(productForm.getBrand_id());
                newBrand.setName(productForm.getBrand_name());
                return brandService.save(newBrand);
            });

            // T·∫°o product

            existingProduct.setName(productForm.getName());
            existingProduct.setPrice(productForm.getPrice());
            existingProduct.setDescription(productForm.getDescription());
            existingProduct.setStockQuantity(productForm.getStock_quantity());

            // Set category & brand cho product
            existingProduct.setCategory(category);
            existingProduct.setBrand(brand);


            // L∆∞u ƒë·ªãa ch·ªâ v√† ·ª©ng vi√™n
            productService.updateProduct(id, existingProduct);
            //candidateService.updateCandidate(id, existingCandidate);

            redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t ·ª©ng vi√™n th√†nh c√¥ng!");
            return "redirect:/admin/product";
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "C·∫≠p nh·∫≠t ·ª©ng vi√™n th·∫•t b·∫°i!");
            return "redirect:/admin/products/edit/" + id;
        }
    }

    // X·ª≠ l√Ω x√≥a ·ª©ng vi√™n
    @GetMapping("/admin/products/delete/{id}")
    public String deleteProduct(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
        try {
            productService.deleteProductById(id);
            redirectAttributes.addFlashAttribute("successMessage", "X√≥a ·ª©ng vi√™n th√†nh c√¥ng!");
        } catch (ResourceNotFoundException e) {
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "X√≥a ·ª©ng vi√™n th·∫•t b·∫°i!");
        }
        return "redirect:/admin/product";
    }
//    // 6Ô∏è‚É£ X·ª≠ l√Ω c·∫≠p nh·∫≠t s·∫£n ph·∫©m
//    @PostMapping("/update/{id}")
//    public String updateProduct(@PathVariable Long id, @ModelAttribute Product product) {
//        productService.updateProduct(id, product);
//        return "redirect:/admin/product"; // Fix ƒë∆∞·ªùng d·∫´n redirect
//    }
//
//    // 7Ô∏è‚É£ X√≥a s·∫£n ph·∫©m
//    @GetMapping("/delete/{id}")
//    public String deleteProduct(@PathVariable Long id) {
//        productService.deleteProductById(id);
//        return "redirect:/admin/product"; // Fix ƒë∆∞·ªùng d·∫´n redirect
//    }
}

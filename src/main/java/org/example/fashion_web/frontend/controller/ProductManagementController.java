package org.example.fashion_web.frontend.controller;

import org.example.fashion_web.backend.dto.CategoryForm;
import org.example.fashion_web.backend.dto.ProductForm;
import org.example.fashion_web.backend.exceptions.ResourceNotFoundException;
import org.example.fashion_web.backend.models.Brand;
import org.example.fashion_web.backend.models.Category;
import org.example.fashion_web.backend.models.Image;
import org.example.fashion_web.backend.models.Product;
import org.example.fashion_web.backend.services.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.io.File;
import java.io.IOException;
import java.security.Principal;
import java.util.*;
import java.util.stream.Collectors;

@Controller

public class ProductManagementController {

    @Autowired
    private final ProductService productService;
    @Autowired
    private final BrandService brandService;
    @Autowired
    private final CategoryService categoryService;
    @Autowired
    private final ImageService imageService;
    @Autowired
    private final UserService userService; // Gi·∫£ s·ª≠ b·∫°n c√≥ UserService ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    @Autowired
    private UserDetailsService userDetailsService; // Inject UserDetailsService
    public ProductManagementController(ProductService productService, BrandService brandService, CategoryService categoryService, ImageService imageService, UserService userService) {
        this.productService = productService;
        this.brandService = brandService;
        this.categoryService = categoryService;
        this.imageService = imageService;
        this.userService = userService;
    }

    @GetMapping("/admin/product")
    public String listProducts(
            @RequestParam(defaultValue = "0") Integer page,
            @RequestParam(defaultValue = "10") Integer size,
            Model model, Principal principal) {

        // X·ª≠ l√Ω th√¥ng tin ng∆∞·ªùi d√πng n·∫øu c√≥
        if (principal != null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(principal.getName());
            if (userDetails != null) {
                model.addAttribute("user", userDetails);
            }
        }

        // L·∫•y t·ªïng s·ªë s·∫£n ph·∫©m
        int totalProducts = productService.getTotalProductsCount();

        // N·∫øu s·ªë s·∫£n ph·∫©m > 10, d√πng ph√¢n trang
        if (totalProducts > 10) {
            Pageable pageable = PageRequest.of(page, size);
            Page<Product> productPage = productService.getAllProducts(pageable);
            model.addAttribute("productPage", productPage);
            model.addAttribute("currentPage", page);
            model.addAttribute("pageSize", size);
            return "product/products-paging";
        } else {
            // N·∫øu s·ªë s·∫£n ph·∫©m <= 15, tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch
            List<Product> products = productService.getAllProducts();
            model.addAttribute("products", products);
            return "product/products";
        }
    }



    @GetMapping("/admin/products/add-category")
    public String showAddCategoryForm(Model model) {
        model.addAttribute("categoryForm", new CategoryForm());
        model.addAttribute("categories", categoryService.getAllChildrenCategories()); // L·∫•y danh m·ª•c
        model.addAttribute("categoriesParent", categoryService.getAllParentCategories()); // L·∫•y danh m·ª•c
        return "product/add-category";
    }

    @PostMapping("/admin/products/add-category")
    public String addCategory(@ModelAttribute("categoryForm") CategoryForm categoryForm, Model model, RedirectAttributes redirectAttributes) {
        try {
            // Ki·ªÉm tra v√† l∆∞u category parent
            Optional<Category> categoryOpt = categoryService.findByName(categoryForm.getParent_category_name());
            Category categoryParent = categoryOpt.orElseGet(() -> {
                Category newCategory = new Category();
                newCategory.setId(categoryForm.getParent_category_id());
                return categoryService.save(newCategory);
            });
            // T·∫°o category
            Category category = new Category();
            category.setName(categoryForm.getCategory_name());
            category.setDescription(categoryForm.getDescription());
            category.setParentCategory(categoryParent);

            categoryService.save(category);

            System.out.println("Th√¥ng tin s·∫£n ph·∫©m: " + category);
            redirectAttributes.addFlashAttribute("successMessage", "Th√™m danh m·ª•c s·∫£n ph·∫©m th√†nh c√¥ng!");
            return "redirect:/admin/product";
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "Th√™m danh m·ª•c s·∫£n ph·∫©m th·∫•t b·∫°i!");

            // üîπ Truy·ªÅn l·∫°i productForm ƒë·ªÉ gi·ªØ d·ªØ li·ªáu ƒë√£ nh·∫≠p
            model.addAttribute("categoryForm", categoryForm);
            return "product/add-category"; // Kh√¥ng redirect, m√† tr·∫£ v·ªÅ trang nh·∫≠p form
        }
    }

    @GetMapping("/admin/products/add")
    public String showAddProductForm(Model model) {
        model.addAttribute("productForm", new ProductForm());
        model.addAttribute("categories", categoryService.getAllChildrenCategories()); // L·∫•y danh m·ª•c
        return "product/add-product";
    }

    @PostMapping("/admin/products/add")
    public String addProduct(@ModelAttribute("productForm") ProductForm productForm, Model model, RedirectAttributes redirectAttributes) {
        try {
            // Ki·ªÉm tra v√† l∆∞u category
            Optional<Category> categoryOpt = categoryService.findByName(productForm.getCategory_name());
            Category category = categoryOpt.orElseGet(() -> {
                Category newCategory = new Category();
                newCategory.setId(productForm.getCategory_id());
                return categoryService.save(newCategory);
            });

            // Ki·ªÉm tra v√† l∆∞u brand
            Optional<Brand> brandOpt = brandService.findByName(productForm.getBrand_name());
            Brand brand = brandOpt.orElseGet(() -> {
                Brand newBrand = new Brand();
                newBrand.setId(productForm.getBrand_id());
                return brandService.save(newBrand);
            });


            // T·∫°o product
            Product product = new Product();
            product.setName(productForm.getName());
            product.setPrice(productForm.getPrice());
            product.setDescription(productForm.getDescription());
            product.setStockQuantity(productForm.getStock_quantity());


            // Set category & brand cho product
            product.setCategory(category);
            product.setBrand(brand);

            productService.save(product);
            if (productForm.getImageFile() == null) {
                System.out.println("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n!");
            } else {
                System.out.println("S·ªë l∆∞·ª£ng file: " + productForm.getImageFile().toArray().length);
                for (MultipartFile file : productForm.getImageFile()) {
                    System.out.println("T√™n file: " + file.getOriginalFilename());
                }
            }
            // L∆∞u h√¨nh ·∫£nh
            if (productForm.getImageFile() != null && !productForm.getImageFile().isEmpty()) {
                // ƒê·ªãnh nghƒ©a th∆∞ m·ª•c l∆∞u ·∫£nh
                String uploadDir = "pics/uploads/";

                // Ki·ªÉm tra n·∫øu th∆∞ m·ª•c ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi
                File uploadPath = new File(uploadDir);
                if (!uploadPath.exists()) {
                    uploadPath.mkdirs(); // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
                }

                for (MultipartFile file : productForm.getImageFile()) {
                    if (!file.isEmpty()) {
                        try {
                            String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename(); // Tr√°nh tr√πng t√™n file
                            String filePath = uploadDir + fileName;

                            // T·∫°o ƒë·ªëi t∆∞·ª£ng Image ƒë·ªÉ l∆∞u v√†o DB
                            Image image = new Image();
                            image.setProduct(product);
                            image.setImageUri(filePath); // ƒê∆∞·ªùng d·∫´n file ƒë·ªÉ hi·ªÉn th·ªã
                            image.setImageName(fileName);
                            image.setImageSize((int) file.getSize());
                            image.setImageType(file.getContentType());

                            // L∆∞u th√¥ng tin ·∫£nh v√†o database
                            imageService.save(image);

                            // L∆∞u file v√†o th∆∞ m·ª•c tr√™n server
                            File destinationFile = new File(uploadPath, fileName);
                            file.transferTo(destinationFile);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
            System.out.println("Th√¥ng tin s·∫£n ph·∫©m: " + product);
            redirectAttributes.addFlashAttribute("successMessage", "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
            return "redirect:/admin/product";
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i!");

            // üîπ Truy·ªÅn l·∫°i productForm ƒë·ªÉ gi·ªØ d·ªØ li·ªáu ƒë√£ nh·∫≠p
            model.addAttribute("productForm", productForm);
            return "product/add-product"; // Kh√¥ng redirect, m√† tr·∫£ v·ªÅ trang nh·∫≠p form
        }
    }
    // 2Ô∏è‚É£ Xem chi ti·∫øt s·∫£n ph·∫©m theo ID
    @GetMapping("/user/product-detail/{id}")
    public String viewProduct(@PathVariable Long id, Model model,Principal principal) {
        UserDetails userDetails = userDetailsService.loadUserByUsername(principal.getName());
        model.addAttribute("user", userDetails);

        Product product = productService.getProductById(id)
                .orElse(null);
        if (product == null) {
            return "redirect:/user"; // Fix ƒë∆∞·ªùng d·∫´n redirect
        }

        // L·∫•y danh s√°ch ·∫£nh v√† ch·ªâ l·∫•y ƒë∆∞·ªùng d·∫´n ·∫£nh (imageUrl)
        List<String> productImages = imageService.findImagesByProductId(id)
                .stream()
                .map(Image::getImageUri) // Ch·ªâ l·∫•y URL ·∫£nh
                .collect(Collectors.toList());

        model.addAttribute("product", product);
        model.addAttribute("productImages", productImages);
        return "product/product-detail"; // ƒê·∫£m b·∫£o c√≥ file product/product-detail.html
    }

    // Hi·ªÉn th·ªã form c·∫≠p nh·∫≠t s·∫£n ph·∫©m
    @GetMapping("/admin/products/edit/{id}")
    public String showEditProductForm(@PathVariable("id") Long id, Model model, RedirectAttributes redirectAttributes) {
        Product product = productService.getProductById(id)
                .orElseThrow(() -> new ResourceNotFoundException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + id));

        // Ki·ªÉm tra v√† l∆∞u category
        Optional<Category> categoryOpt = categoryService.findByName(product.getCategory().getName());
        Category category = categoryOpt.orElseGet(() -> {
            Category newCategory = new Category();
            newCategory.setId(product.getCategory().getId());
            return categoryService.save(newCategory);
        });

        // Ki·ªÉm tra v√† l∆∞u brand
        Optional<Brand> brandOpt = brandService.findByName(product.getBrand().getName());
        Brand brand = brandOpt.orElseGet(() -> {
            Brand newBrand = new Brand();
            newBrand.setId(product.getBrand().getId());
            return brandService.save(newBrand);
        });
        // Chuy·ªÉn ƒë·ªïi ƒë·ªëi t∆∞·ª£ng Product th√†nh ProductForm ƒë·ªÉ d·ªÖ d√†ng x·ª≠ l√Ω trong form
        ProductForm productForm = new ProductForm();
        productForm.setProduct_id(product.getId());
        productForm.setBrand_id(product.getBrand().getId());
        productForm.setCategory_id(product.getCategory().getId());
        productForm.setName(product.getName());
        productForm.setPrice(product.getPrice());
        productForm.setDescription(product.getDescription());
        productForm.setBrand_name(product.getBrand().getName());
        productForm.setCategory_name(product.getCategory().getName());

        productForm.setImageFile(productForm.getImageFile());
        System.out.println("#"+productForm.getImageFile());

        model.addAttribute("categories", categoryService.getAllChildrenCategories()); // L·∫•y danh m·ª•c
        model.addAttribute("productForm", productForm);
        return "product/update-products";
    }
    // X·ª≠ l√Ω c·∫≠p nh·∫≠t ·ª©ng vi√™n
    @PostMapping("/admin/products/edit/{id}")
    public String updateProduct(@PathVariable("id") Long id,
                                  @ModelAttribute("productForm") ProductForm productForm,
                                  RedirectAttributes redirectAttributes) {
        try {
            Product existingProduct = productService.getProductById(id)
                    .orElseThrow(() -> new ResourceNotFoundException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + id));

            // Ki·ªÉm tra v√† l∆∞u category
            Optional<Category> categoryOpt = categoryService.findByName(productForm.getCategory_name());
            Category category = categoryOpt.orElseGet(() -> {
                Category newCategory = new Category();
                newCategory.setId(productForm.getCategory_id());
                newCategory.setName(productForm.getCategory_name());
                return categoryService.save(newCategory);
            });

            // Ki·ªÉm tra v√† l∆∞u brand
            Optional<Brand> brandOpt = brandService.findByName(productForm.getBrand_name());
            Brand brand = brandOpt.orElseGet(() -> {
                Brand newBrand = new Brand();
                newBrand.setId(productForm.getBrand_id());
                newBrand.setName(productForm.getBrand_name());
                return brandService.save(newBrand);
            });

            // T·∫°o product

            existingProduct.setName(productForm.getName());
            existingProduct.setPrice(productForm.getPrice());
            existingProduct.setDescription(productForm.getDescription());
            existingProduct.setStockQuantity(productForm.getStock_quantity());

            // Set category & brand cho product
            existingProduct.setCategory(category);
            existingProduct.setBrand(brand);

            // L∆∞u h√¨nh ·∫£nh
            if (productForm.getImageFile() != null && !productForm.getImageFile().isEmpty()) {
                // ƒê·ªãnh nghƒ©a th∆∞ m·ª•c l∆∞u ·∫£nh
                String uploadDir = "/pics/uploads/";

                // Ki·ªÉm tra n·∫øu th∆∞ m·ª•c ch∆∞a t·ªìn t·∫°i th√¨ t·∫°o m·ªõi
                File uploadPath = new File(uploadDir);
                if (!uploadPath.exists()) {
                    uploadPath.mkdirs(); // T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
                }

                for (MultipartFile file : productForm.getImageFile()) {
                    if (!file.isEmpty()) {
                        try {
                            String fileName = System.currentTimeMillis() + "_" + file.getOriginalFilename(); // Tr√°nh tr√πng t√™n file
                            String filePath = uploadDir + fileName;

                            // T·∫°o ƒë·ªëi t∆∞·ª£ng Image ƒë·ªÉ l∆∞u v√†o DB
                            Image image = new Image();
                            image.setProduct(existingProduct);
                            image.setImageUri(filePath); // ƒê∆∞·ªùng d·∫´n file ƒë·ªÉ hi·ªÉn th·ªã
                            image.setImageName(fileName);
                            image.setImageSize((int) file.getSize());
                            image.setImageType(file.getContentType());

                            // L∆∞u th√¥ng tin ·∫£nh v√†o database
                            imageService.save(image);

                            // L∆∞u file v√†o th∆∞ m·ª•c tr√™n server
                            File destinationFile = new File(uploadPath, fileName);
                            file.transferTo(destinationFile);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }


            // L∆∞u ƒë·ªãa ch·ªâ v√† ·ª©ng vi√™n
            productService.updateProduct(id, existingProduct);

            redirectAttributes.addFlashAttribute("successMessage", "C·∫≠p nh·∫≠t ·ª©ng vi√™n th√†nh c√¥ng!");
            return "redirect:/admin/product";
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "C·∫≠p nh·∫≠t ·ª©ng vi√™n th·∫•t b·∫°i!");
            return "redirect:/admin/products/edit/" + id;
        }
    }

    // X·ª≠ l√Ω x√≥a ·ª©ng vi√™n
    @GetMapping("/admin/products/delete/{id}")
    public String deleteProduct(@PathVariable("id") Long id, RedirectAttributes redirectAttributes) {
        try {
            productService.deleteProductById(id);
            redirectAttributes.addFlashAttribute("successMessage", "X√≥a ·ª©ng vi√™n th√†nh c√¥ng!");
        } catch (ResourceNotFoundException e) {
            redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            redirectAttributes.addFlashAttribute("errorMessage", "X√≥a ·ª©ng vi√™n th·∫•t b·∫°i!");
        }
        return "redirect:/admin/product";
    }
    @GetMapping("/user/shop")
    public String listProducts(
            @RequestParam(value = "category", required = false, defaultValue = "nam") String category,
            Model model, Principal principal) {
        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu kh√¥ng
        System.out.println("Danh m·ª•c ƒë∆∞·ª£c ch·ªçn: " + category);

        // X·ª≠ l√Ω th√¥ng tin ng∆∞·ªùi d√πng n·∫øu c√≥
        if (principal != null) {
            UserDetails userDetails = userDetailsService.loadUserByUsername(principal.getName());
            if (userDetails != null) {
                model.addAttribute("user", userDetails);
            }
        }

        // L·ªçc s·∫£n ph·∫©m theo danh m·ª•c
        List<Product> products = productService.getProductsByCategory(category);
        System.out.println("S·ªë s·∫£n ph·∫©m t√¨m th·∫•y: " + products.size());
        for (Product p : products) {
            System.out.println("S·∫£n ph·∫©m: " + p.getName() + " - Gi√°: " + p.getPrice());
        }
        model.addAttribute("products", products);

        // Nh√≥m danh s√°ch ·∫£nh theo productId
        Map<Long, List<String>> productImages = new HashMap<>();
        for (Product product : products) {
            List<Image> images = imageService.findImagesByProductId(product.getId());
            List<String> imageUrls = images.stream().map(Image::getImageUri).collect(Collectors.toList());
            productImages.put(product.getId(), imageUrls);
        }

        model.addAttribute("productImages", productImages);
        model.addAttribute("currentCategory", category); // L∆∞u danh m·ª•c hi·ªán t·∫°i ƒë·ªÉ x·ª≠ l√Ω giao di·ªán

        return "shop"; // Tr·∫£ v·ªÅ trang shop.html chung
    }

}

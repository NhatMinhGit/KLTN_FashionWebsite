package org.example.fashion_web.frontend.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.example.fashion_web.backend.models.Chatbot;
import org.example.fashion_web.backend.models.ChatbotSession;
import org.example.fashion_web.backend.models.User;
import org.example.fashion_web.backend.services.ChatbotService;
import org.example.fashion_web.backend.services.ChatbotSessionService;
import org.example.fashion_web.backend.services.UserService;
import org.example.fashion_web.backend.services.servicesimpl.GeminiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/admin")
public class GeminiAdminController {
    @Autowired
    private GeminiService geminiService;

    @Autowired
    private UserService userService;

    @Autowired
    private ChatbotService chatbotService;

    @Autowired
    private ChatbotSessionService chatbotSessionService;


    @GetMapping("/chat")
    public ResponseEntity<String> chat(@RequestParam String message, Principal principal) throws JsonProcessingException {
        String response;
        String userName = principal.getName();
        User user = userService.findByEmail(userName);

        if (user == null) {
            return ResponseEntity.badRequest().body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
        }

        Chatbot chatbot = chatbotService.findChatBotByUserId(user.getId());
        if (chatbot == null) {
            return ResponseEntity.badRequest().body("Chatbot kh√¥ng t·ªìn t·∫°i cho ng∆∞·ªùi d√πng n√†y.");
        }

        ChatbotSession session = chatbotSessionService.startOrGetActiveSession(chatbot, user.getId());

        // L∆∞u message ng∆∞·ªùi d√πng g·ª≠i
        geminiService.saveConversation(session, "USER", message, "text", null, null);

        // Tr√≠ch xu·∫•t intent v√† entities
        Map<String, String> extractedData = extractIntentAndEntities(message);
        String intent = extractedData.get("intent");
        String entities = extractedData.get("entities"); // Ho·∫∑c n·∫øu b·∫°n kh√¥ng c·∫ßn entities, c√≥ th·ªÉ l√† null

        // X·ª≠ l√Ω ph·∫£n h·ªìi d·ª±a tr√™n intent
        switch (intent) {
            case "check_stock":
                response = geminiService.checkStock(message);
                break;
            case "refund_policy":
                response = geminiService.refundPolicyForStaff();
                break;
            case "faq":
                response = geminiService.faqShowForStaff();
                break;
            case "monthly_revenue":
                response = geminiService.checkMonthlyRenvenue(message);
                break;
            case "yearly_revenue":
                response = geminiService.checkYearlyRenvenue(message);
                break;
            case "business_plan": {
                Map<String, Object> businessPlanResponse = new HashMap<>();

                // 1. Top s·∫£n ph·∫©m doanh thu cao
                String topProducts = geminiService.checkTopProductsRevenueForOptimalPlan(message);
                businessPlanResponse.put("topProducts", topProducts);

                // 2. G·ª£i √Ω th·ªùi trang theo m√πa
                String weatherSuggestionJson = geminiService.getVietnamWeatherSuggestion(message);

                // 3. G·ª£i √Ω th·ªùi trang theo s·ª± ki·ªán
                String eventSuggestionJson = geminiService.getVietnamEventSuggestion(message);

                ObjectMapper objectMapper = new ObjectMapper();

                String aiResponse;
                try {
                    // Parse th·ªùi trang theo m√πa
                    Map<String, Object> weatherData = objectMapper.readValue(weatherSuggestionJson, Map.class);
                    String currentSeason = (String) weatherData.get("currentSeason");
                    List<String> currentSuggestions = ((List<?>) weatherData.get("currentSuggestions"))
                            .stream()
                            .map(Object::toString)
                            .collect(Collectors.toList());


                    String nextSeason = (String) weatherData.get("nextSeason");
                    List<String> nextSuggestions = ((List<?>) weatherData.get("nextSuggestions"))
                            .stream()
                            .map(Object::toString)
                            .collect(Collectors.toList());

                    // Parse th·ªùi trang theo s·ª± ki·ªán
                    Map<String, Object> eventData = objectMapper.readValue(eventSuggestionJson, Map.class);
                    String eventSuggestion = (String) eventData.get("suggestion");

                    // Format l·∫°i aiResponse
                    aiResponse = "ƒê√¢y l√† k·∫ø ho·∫°ch doanh nghi·ªáp c·ªßa b·∫°n:<br><br>" +
                            "üå§Ô∏è G·ª£i √Ω th·ªùi trang theo m√πa hi·ªán t·∫°i (" + currentSeason + "): " + String.join(", ", currentSuggestions) + "<br>" +
                            "üçÇ Chu·∫©n b·ªã cho m√πa ti·∫øp theo (" + nextSeason + "): " + String.join(", ", nextSuggestions) + "<br>" +
                            "üéâ G·ª£i √Ω th·ªùi trang theo s·ª± ki·ªán: " + eventSuggestion;

                } catch (Exception e) {
                    aiResponse = "ƒê√¢y l√† k·∫ø ho·∫°ch doanh nghi·ªáp c·ªßa b·∫°n, nh∆∞ng c√≥ l·ªói khi x·ª≠ l√Ω g·ª£i √Ω th·ªùi ti·∫øt ho·∫∑c s·ª± ki·ªán.";
                }

                businessPlanResponse.put("aiResponse", aiResponse);
                Map<String, String> productInfoMap = objectMapper.readValue(topProducts, new TypeReference<Map<String, String>>() {});
                String productInfoHtml = productInfoMap.get("productInfo");
                businessPlanResponse.put("productInfo", productInfoHtml);



                try {
                    response = new ObjectMapper().writeValueAsString(businessPlanResponse);
                } catch (JsonProcessingException e) {
                    response = "{\"error\": \"L·ªói t·∫°o JSON ph·∫£n h·ªìi: " + e.getMessage() + "\"}";
                }
                break;
            }

            case "check_bestsellers":
                response = geminiService.checkTopProductsRevenueForUser(message);
                break;
            default:
                response = geminiService.chatWithAI(message);
                break;
        }

        // L∆∞u ph·∫£n h·ªìi t·ª´ chatbot
        geminiService.saveConversation(session, "BOT", response, "text", intent, entities);

        return ResponseEntity.ok(response);
    }

    // H√†m tr√≠ch xu·∫•t intent v√† entities t·ª´ c√¢u h·ªèi
    private Map<String, String> extractIntentAndEntities(String message) {
        Map<String, String> result = new HashMap<>();
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra intent
        if (isStockQuery(lowerCaseMessage)) {
            result.put("intent", "check_stock");
        } else if (isRefundPolicy(lowerCaseMessage)) {
            result.put("intent", "refund_policy");
        } else if (isFAQS(lowerCaseMessage)) {
            result.put("intent", "faq");
        } else if (isMonthlyRevenue(lowerCaseMessage)) {
            result.put("intent", "monthly_revenue");
        } else if (isYearlyRevenue(lowerCaseMessage)) {
            result.put("intent", "yearly_revenue");
        } else if (isOptimalBusinessPlan(lowerCaseMessage)) {
            result.put("intent", "business_plan");
        } else if (isBESTSELLERS(lowerCaseMessage)) {
            result.put("intent", "check_bestsellers");
        } else {
            result.put("intent", "general_chat");
        }

        // Tr√≠ch xu·∫•t c√°c th·ª±c th·ªÉ (entities) t·ª´ c√¢u h·ªèi (c√≥ th·ªÉ m·ªü r·ªông th√™m theo y√™u c·∫ßu)
        result.putAll(extractEntities(lowerCaseMessage));

        return result;
    }

    // H√†m tr√≠ch xu·∫•t entities (c√≥ th·ªÉ m·ªü r·ªông th√™m)
    private Map<String, String> extractEntities(String message) {
        Map<String, String> entities = new HashMap<>();
        // V√≠ d·ª•: Tr√≠ch xu·∫•t th√°ng ho·∫∑c nƒÉm t·ª´ c√¢u h·ªèi (c√≥ th·ªÉ th√™m c√°c entities kh√°c)
        Pattern monthPattern = Pattern.compile("(th√°ng\\s*(\\d{1,2}))|(\\b(0?[1-9]|1[0-2])\\b)");
        Matcher monthMatcher = monthPattern.matcher(message);
        if (monthMatcher.find()) {
            String month = monthMatcher.group(2) != null ? monthMatcher.group(2) : monthMatcher.group(1);
            entities.put("month", month.replaceAll("[^\\d]", ""));
        }

        Pattern yearPattern = Pattern.compile("nƒÉm\\s*(\\d{4})|(\\b20\\d{2}\\b)");
        Matcher yearMatcher = yearPattern.matcher(message);
        if (yearMatcher.find()) {
            String year = yearMatcher.group(1) != null ? yearMatcher.group(1) : yearMatcher.group(2);
            entities.put("year", year);
        }

        return entities;
    }
    private boolean isBESTSELLERS(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return lowerCaseMessage.contains("best sellers") ||
                lowerCaseMessage.contains("b√°n ch·∫°y") ||
                lowerCaseMessage.contains("ƒë∆∞·ª£c y√™u th√≠ch") ||
                lowerCaseMessage.contains("trending");
    }
    private boolean isRefundPolicy(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return lowerCaseMessage.contains("refund policy") ||
                lowerCaseMessage.contains("ho√†n ph√≠") ||
                lowerCaseMessage.contains("ch√≠nh s√°ch ho√†n ph√≠") ||
                lowerCaseMessage.contains("refund");
    }
    private boolean isFAQS(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return  lowerCaseMessage.contains("faqs") ||
                lowerCaseMessage.contains("th·∫Øc m·∫Øc") ||
                lowerCaseMessage.contains("s·ª≠ d·ª•ng") ||
                lowerCaseMessage.contains("h∆∞·ªõng d·∫´n") ||
                lowerCaseMessage.contains("h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng");
    }


    private boolean isStockQuery(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return lowerCaseMessage.contains("c√≤n kh√¥ng") ||
                lowerCaseMessage.contains("c√≤n h√†ng kh√¥ng") ||
                lowerCaseMessage.contains("c√≥ h√†ng kh√¥ng") ||
                lowerCaseMessage.contains("s·ªë l∆∞·ª£ng");

    }
    private boolean isMonthlyRevenue(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return lowerCaseMessage.contains("doanh thu") ||
                lowerCaseMessage.contains("t√¨nh h√¨nh th√°ng n√†y") ||
                lowerCaseMessage.contains("th√°ng n√†y") ||
                lowerCaseMessage.contains("this month revenue") ||
                lowerCaseMessage.contains("ph√¢n t√≠ch doanh thu");
    }

    private boolean isYearlyRevenue(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return lowerCaseMessage.contains("doanh thu") ||
                lowerCaseMessage.contains("t√¨nh h√¨nh nƒÉm n√†y") ||
                lowerCaseMessage.contains("nƒÉm n√†y") ||
                lowerCaseMessage.contains("this year revenue") ||
                lowerCaseMessage.contains("ph√¢n t√≠ch doanh thu");
    }
    private boolean isOptimalBusinessPlan(String message) {
        // Chuy·ªÉn c√¢u h·ªèi v·ªÅ d·∫°ng ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh d·ªÖ h∆°n
        String lowerCaseMessage = message.toLowerCase();

        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi c√≥ ch·ª©a c√°c t·ª´ kh√≥a li√™n quan ƒë·∫øn s·ªë l∆∞·ª£ng t·ªìn kho
        return lowerCaseMessage.contains("chi·∫øn l∆∞·ª£c") ||
                lowerCaseMessage.contains("bussiness plan") ||
                lowerCaseMessage.contains("optimal bussiness plan") ||
                lowerCaseMessage.contains("t∆∞∆°ng lai") ||
                lowerCaseMessage.contains("ph√¢n t√≠ch chi·∫øn l∆∞·ª£c") ||
                lowerCaseMessage.contains("tƒÉng doanh s·ªë");
    }

    @GetMapping("/chatbot")
    public ModelAndView chatbotPage(Principal principal, Model model) {
        Long userId = null;

        if (principal != null) {
            System.out.println("Principal Name: " + principal.getName());  // Debug principal

            User user = userService.findByEmail(principal.getName());
            if (user != null) {
                userId = user.getId();
                model.addAttribute("user", user);
            } else {
                System.out.println("User not found for: " + principal.getName());
            }
        } else {
            System.out.println("Principal is NULL!");
        }

        System.out.println("UserID in chatbotPage: " + userId); // Debug userId

        return new ModelAndView("ai_chatbot/admin-chat-window");
    }
}
